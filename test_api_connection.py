#!/usr/bin/env python3
"""
Script de test pour diagnostiquer les probl√®mes de connexion API Kraken
"""

import os
import sys
from dotenv import load_dotenv
import krakenex
import pykrakenapi as kraken

def test_api_connection():
    """Tester la connexion √† l'API Kraken"""
    
    # Charger les variables d'environnement
    load_dotenv('config.env')
    
    # R√©cup√©rer les cl√©s
    spot_api_key = os.getenv('SPOT_API_KEY')
    spot_secret_key = os.getenv('SPOT_SECRET_KEY')
    
    print("=== DIAGNOSTIC API KRAKEN ===")
    print(f"Cl√© API trouv√©e: {'Oui' if spot_api_key else 'Non'}")
    print(f"Cl√© secr√®te trouv√©e: {'Oui' if spot_secret_key else 'Non'}")
    
    if spot_api_key:
        print(f"Longueur cl√© API: {len(spot_api_key)} caract√®res")
        print(f"Pr√©fixe cl√© API: {spot_api_key[:10]}...")
    
    if spot_secret_key:
        print(f"Longueur cl√© secr√®te: {len(spot_secret_key)} caract√®res")
        print(f"Pr√©fixe cl√© secr√®te: {spot_secret_key[:10]}...")
    
    print("\n=== TEST DE CONNEXION ===")
    
    try:
        # Test 1: Connexion sans authentification (API publique)
        print("1. Test API publique...")
        api_public = krakenex.API()
        time_info = api_public.query_public('Time')
        if time_info and time_info.get('error') == []:
            print("‚úÖ API publique fonctionne")
            print(f"   Heure serveur: {time_info['result']['unixtime']}")
        else:
            print("‚ùå API publique √©choue")
            print(f"   Erreur: {time_info}")
        
        # Test 2: Connexion avec authentification
        print("\n2. Test API priv√©e...")
        if not spot_api_key or not spot_secret_key:
            print("‚ùå Cl√©s API manquantes")
            return False
        
        # Nettoyer les cl√©s (enlever les espaces et caract√®res invisibles)
        clean_api_key = spot_api_key.strip()
        clean_secret_key = spot_secret_key.strip()
        
        print(f"Cl√© API nettoy√©e: {clean_api_key[:10]}...")
        print(f"Cl√© secr√®te nettoy√©e: {clean_secret_key[:10]}...")
        
        api_private = krakenex.API(
            key=clean_api_key,
            secret=clean_secret_key
        )
        
        # Test de l'API priv√©e - Balance
        balance_result = api_private.query_private('Balance')
        
        if balance_result and balance_result.get('error') == []:
            print("‚úÖ API priv√©e fonctionne")
            print("   Solde r√©cup√©r√© avec succ√®s")
            balance = balance_result['result']
            if balance:
                print("   Actifs trouv√©s:")
                for asset, amount in balance.items():
                    if float(amount) > 0:
                        print(f"     {asset}: {amount}")
            else:
                print("   Aucun solde trouv√©")
        else:
            print("‚ùå API priv√©e √©choue")
            if balance_result:
                print(f"   Erreur: {balance_result.get('error', 'Erreur inconnue')}")
            else:
                print("   Aucune r√©ponse de l'API")
        
        # Test 3: Test avec pykrakenapi
        print("\n3. Test avec pykrakenapi...")
        kraken_api = kraken.KrakenAPI(api_private)
        
        try:
            balance_df = kraken_api.get_account_balance()
            if balance_df is not None and not balance_df.empty:
                print("‚úÖ pykrakenapi fonctionne")
                print(f"   Nombre d'actifs: {len(balance_df)}")
            else:
                print("‚ö†Ô∏è  pykrakenapi retourne un DataFrame vide")
        except Exception as e:
            print(f"‚ùå Erreur pykrakenapi: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        return False

def check_config_file():
    """V√©rifier le fichier de configuration"""
    print("\n=== V√âRIFICATION DU FICHIER CONFIG ===")
    
    if not os.path.exists('config.env'):
        print("‚ùå Fichier config.env non trouv√©")
        return False
    
    print("‚úÖ Fichier config.env trouv√©")
    
    # Lire le contenu du fichier
    with open('config.env', 'r') as f:
        content = f.read()
    
    lines = content.split('\n')
    
    # V√©rifier les cl√©s
    spot_api_found = any('SPOT_API_KEY=' in line for line in lines)
    spot_secret_found = any('SPOT_SECRET_KEY=' in line for line in lines)
    
    print(f"SPOT_API_KEY trouv√©e: {'Oui' if spot_api_found else 'Non'}")
    print(f"SPOT_SECRET_KEY trouv√©e: {'Oui' if spot_secret_found else 'Non'}")
    
    # Afficher les lignes avec les cl√©s (masqu√©es)
    for line in lines:
        if 'SPOT_API_KEY=' in line:
            parts = line.split('=', 1)
            if len(parts) == 2:
                key_value = parts[1].strip()
                if key_value:
                    print(f"SPOT_API_KEY: {key_value[:10]}...{key_value[-5:] if len(key_value) > 15 else ''}")
                else:
                    print("SPOT_API_KEY: (vide)")
        elif 'SPOT_SECRET_KEY=' in line:
            parts = line.split('=', 1)
            if len(parts) == 2:
                key_value = parts[1].strip()
                if key_value:
                    print(f"SPOT_SECRET_KEY: {key_value[:10]}...{key_value[-5:] if len(key_value) > 15 else ''}")
                else:
                    print("SPOT_SECRET_KEY: (vide)")
    
    return True

if __name__ == "__main__":
    print("üîç Diagnostic des probl√®mes de connexion API Kraken")
    print("=" * 60)
    
    # V√©rifier le fichier de configuration
    config_ok = check_config_file()
    
    if config_ok:
        # Tester la connexion API
        api_ok = test_api_connection()
        
        if api_ok:
            print("\n‚úÖ Diagnostic termin√© - API fonctionne")
        else:
            print("\n‚ùå Diagnostic termin√© - Probl√®mes d√©tect√©s")
            print("\nüîß Solutions possibles:")
            print("1. V√©rifiez que vos cl√©s API sont correctes")
            print("2. Assurez-vous que les cl√©s ont les bonnes permissions")
            print("3. V√©rifiez que votre compte Kraken est actif")
            print("4. Essayez de r√©g√©n√©rer vos cl√©s API")
    else:
        print("\n‚ùå Probl√®me avec le fichier de configuration")
        print("üîß Solutions:")
        print("1. V√©rifiez que config.env existe")
        print("2. V√©rifiez le format des cl√©s API")
        print("3. Assurez-vous qu'il n'y a pas d'espaces en trop") 